<!DOCTYPE html>
<html>

<head>
  <title><%= title %></title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link href='https://cdn.jsdelivr.net/npm/remixicon@3.5.0/fonts/remixicon.css' rel='stylesheet'>
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
</head>

<body>
  <div id="main" class="flex flex-col md:flex-row h-screen bg-gray-100">
    <div class="left w-full md:w-1/3 lg:w-1/4 border-r bg-white">
      <div class="top p-4 border-b shadow-sm">
        <div class="loggedInUserDiv flex justify-between items-center">
          <div class="user flex items-center gap-3">
            <img src="<%= loggedInUser.profileImage %>" alt="" class="w-10 h-10 md:w-12 md:h-12 rounded-full object-cover shadow-sm">
            <h3 class="font-semibold text-gray-800 text-sm md:text-base"><%= loggedInUser.username %></h3>
          </div>

          <div class="flex bottom-0 gap-2 md:gap-4">
            <button id="joinGroupButton" onclick="joinGroup()" class="p-2 hover:bg-gray-100 rounded-full transition">
              <i class="ri-user-add-line text-gray-600 text-lg md:text-xl"></i>
            </button>
            <button onclick="createNewGroup()" class="p-2 hover:bg-gray-100 rounded-full transition">
              <i class="ri-add-line text-gray-600 text-lg md:text-xl"></i>
            </button>
          </div>
        </div>
      </div>
      <div class="bottom overflow-y-auto h-[calc(100vh-88px)] scrollbar-thin scrollbar-thumb-gray-300">
        <div class="chats divide-y divide-gray-100">
          <!-- Chat items will be appended here -->
        </div>
      </div>
    </div>

    <div class="right hidden flex-1 flex flex-col">
      <div class="top p-4 bg-white border-b shadow-sm">
        <div id="currentChatUser" class="user flex items-center gap-3">
          <span class="back-button md:hidden">‚Üê</span>
          <img src="..." alt="" class="w-10 h-10 md:w-12 md:h-12 rounded-full object-cover shadow-sm">
          <h3 class="font-semibold text-gray-800 text-sm md:text-base">username</h3>
        </div>
      </div>
      <div class="middle flex-1 overflow-y-auto p-4 bg-gray-50 scrollbar-thin scrollbar-thumb-gray-300" style="padding-bottom: 100px;">
        <div class="coversationArea flex flex-col gap-3">
          <!-- Messages will appear here -->
        </div>
      </div>
      <div class="bottom fixed md:sticky bottom-0 left-0 right-0 bg-white border-t flex items-center gap-3 w-full p-4 md:p-6">
        <input type="text" 
               placeholder="Type your message..." 
               class="flex-1 h-14 md:h-14 px-6 border rounded-full focus:outline-none focus:border-blue-400 focus:ring-2 focus:ring-blue-100 text-gray-700 text-base transition-all"
        >
        <button onclick="sendMessage()" 
                class="h-14 md:h-14 px-6 md:px-8 bg-blue-500 text-white rounded-full hover:bg-blue-600 active:bg-blue-700 transition font-medium text-base flex items-center justify-center gap-2 min-w-[4.5rem] md:min-w-[7rem]">
          <span class="hidden md:inline">Send</span>
          <i class="ri-send-plane-fill text-lg"></i>
        </button>
      </div>
    </div>
  </div>

  <script src="/socket.io/socket.io.js"></script>
  <script>
    var socket = io();

    socket.emit('join-server', {
      username: `<%= loggedInUser.username %>`,
      profileImage: `<%= loggedInUser.profileImage %>`
    })

    socket.on('new-user-join', userDetails => {
      appendChat(userDetails.profileImage, userDetails.username)
    })
  </script>
  <script>
    let currentChatUser = null
    const sender = `<%= loggedInUser.username %>`


    function putIncomingMessage(message) {
      const template = `
        <div class="msg incoming self-start max-w-[85%] md:max-w-[75%] animate-fade-in">
          <div class="bg-white rounded-lg p-3 shadow-sm">
            <p class="text-sm md:text-base text-gray-800">${message}</p>
          </div>
          <span class="text-xs text-gray-500 ml-2 mt-1">Just now</span>
        </div>`
      document.querySelector(".coversationArea").innerHTML += template
    }

    function outgoingMessage(message) {
      const template = `
        <div class="msg outgoing self-end max-w-[85%] md:max-w-[75%] animate-fade-in">
          <div class="bg-blue-500 text-white rounded-lg p-3 shadow-sm">
            <p class="text-sm md:text-base">${message}</p>
          </div>
          <span class="text-xs text-gray-500 mr-2 mt-1 text-right">Just now</span>
        </div>`
      document.querySelector('.coversationArea').innerHTML += template
    }

    function sendMessage() {
      const message = document.querySelector('.right .bottom input').value
      outgoingMessage(message)
      document.querySelector('.right .bottom input').value = ""

      console.log({
        message,
        receiver: currentChatUser,
        sender: `<%= loggedInUser.username %>`
      })

      socket.emit('private-message', {
        message,
        receiver: currentChatUser,
        /* insta */
        sender: `<%= loggedInUser.username %>` /* a */
      })

    }

    socket.on('receive-private-message', messageObject => {
      putIncomingMessage(messageObject.message)
    })


    function appendChat(profileImage, username) {
      if (document.querySelector(`#${username}`)) {
        return
      }

      const template = `
        <div onClick="createNewConversation('${profileImage}','${username}')" 
             class="chat hover:bg-gray-50 transition cursor-pointer p-3 md:p-4" 
             id='${username}'>
          <div class="user flex items-center gap-3">
            <img src="${profileImage}" alt="" class="w-10 h-10 md:w-12 md:h-12 rounded-full object-cover shadow-sm">
            <div>
              <h3 class="font-medium text-gray-800 text-sm md:text-base">${username}</h3>
              <p class="text-xs text-gray-500">Click to start chatting</p>
            </div>
          </div>
        </div>`
      document.querySelector('.chats').innerHTML += template
    }

    function createNewConversation(profileImage, username) {
      currentChatUser = username
      const rightSection = document.querySelector('#main .right')
      rightSection.classList.remove('hidden')
      rightSection.classList.add('flex')
      
      // For mobile: hide the left section when chat is opened
      if (window.innerWidth < 768) {
        document.querySelector('#main .left').classList.add('hidden')
      }
      
      document.querySelector("#currentChatUser img").setAttribute('src', profileImage)
      document.querySelector("#currentChatUser h3").textContent = username
      socket.emit('fetch-conversation', {
        receiver: username,
        sender: sender
      })
    }

    socket.on('send-conversation', allMessages => {
      document.querySelector('.coversationArea').innerHTML = ""
      allMessages.forEach(message => {
        if (message.sender == sender /* loggedInUser */ ) {
          outgoingMessage(message.msg)
        } else {
          putIncomingMessage(message.msg)
        }
      });
    })


    function createNewGroup() {
      const groupName = prompt("Enter group name")
      if (!groupName) {
        return
      }
      /* groupName = insta */
      socket.emit("create-new-group", {
        sender /* loggedInUser */ ,
        groupName
      })

    }

    socket.on('group-created', newGroup => {
      appendChat(newGroup.profileImage, newGroup.name)
    })

    socket.on("group-joined", groupDetails => {
      appendChat(groupDetails.profileImage, groupDetails.name)

    })

    function joinGroup() {
      const groupName = prompt("enter group name to join")
      socket.emit('join-group', {
        groupName,
        sender /* loggedInUser */
      })
    }
  </script>

  <style>
    /* Custom scrollbar */
    .scrollbar-thin::-webkit-scrollbar {
      width: 6px;
    }
    .scrollbar-thin::-webkit-scrollbar-track {
      background: #f1f1f1;
    }
    .scrollbar-thin::-webkit-scrollbar-thumb {
      background: #ddd;
      border-radius: 3px;
    }
    .scrollbar-thin::-webkit-scrollbar-thumb:hover {
      background: #ccc;
    }

    /* Fade in animation */
    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(10px); }
      to { opacity: 1; transform: translateY(0); }
    }
    .animate-fade-in {
      animation: fadeIn 0.3s ease-out forwards;
    }

    /* Add these new styles */
    @media (max-width: 768px) {
      .right {
        height: 100vh;
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: 50;
        background: white;
      }

      .right .top {
        padding-left: 1rem;
        display: flex;
        align-items: center;
      }

      /* Update back button styles */
      .back-button {
        font-size: 1.5rem;
        margin-right: 1rem;
        cursor: pointer;
        padding: 0.5rem;
      }
    }
  </style>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      // Add click event for back button
      const backButton = document.querySelector('.back-button');
      if (backButton) {
        backButton.addEventListener('click', function() {
          if (window.innerWidth < 768) {
            document.querySelector('#main .right').classList.add('hidden');
            document.querySelector('#main .right').classList.remove('flex');
            document.querySelector('#main .left').classList.remove('hidden');
          }
        });
      }
    });
  </script>

</body>

</html>